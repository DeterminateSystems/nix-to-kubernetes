name: Build Docker container
on:
  pull_request:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest # x86_64-linux
    environment: build
    steps:
      - name: git checkout
        uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v15
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Set up Cachix
        uses: cachix/cachix-action@v10
        with:
          name: ${{ secrets.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Build Docker image for horoscope service using Nix
        run: nix build ".#docker"

      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load and push image to Docker Hub
        run: |
          export IMAGE_TAG=$(docker load < result | grep -Po 'Loaded image: \K.*')
          echo "Pushing image ${IMAGE_TAG} to GHCR"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          docker push "${IMAGE_TAG}"

      - name: Tag new image as latest
        run: |
          LATEST=$(nix develop --command print-latest-image)
          docker tag "${{ env.IMAGE_TAG }}" "${LATEST}"
          docker push "${LATEST}"

      - name: Cache build artifacts
        run: |
          nix flake archive --json \
            | jq -r '.path,(.inputs|to_entries[].value.path)' \
            | cachix push "${{ secrets.CACHIX_CACHE }}"

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    environment: deploy
    steps:
      - name: git checkout
        uses: actions/checkout@v3

      - name: Install Nix
        uses: cachix/install-nix-action@v15
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Set up Cachix
        uses: cachix/cachix-action@v10
        with:
          name: ${{ secrets.CACHIX_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Authenticate with DigitalOcean
        run: |
          nix develop --command \
            doctl auth init --access-token ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Import kubeconfig
        run: |
          nix develop --command \
            doctl kubernetes cluster kubeconfig save ${{ secrets.K8S_CLUSTER_NAME }}

      - name: Set Kubernetes context
        run: |
          nix develop --command \
            kubectx ${{ secrets.K8S_CONTEXT }}

      - name: List nodes (to verify that kubectl can interact with the cluster)
        run: |
          nix develop --command \
            kubectl get nodes

      - name: Deploy Deployment (heh)
        run: |
          nix develop --command \
            kubectl apply --filename=./kubernetes/deployment.yaml

      - name: Restart the Deployment
        run: |
          nix develop --command \
            kubectl rollout restart deployment.apps/horoscope-deployment
